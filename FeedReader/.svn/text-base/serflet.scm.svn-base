(import generic-procedures)
(import oo)
(import threading)
(import type-system)

(define-generics
  :host :host!
  :port :port!
  :dispatcher :dispatcher!
)

(define uri/mailbox (make-hashtable))


(define-class (<serflet>)
  (host :host :host!) ; Host portion of authority.
  (port :port :port!) ; Port portion of authority.

  (dispatcher :dispatcher :dispatcher!) ; Thread instance of dispatcher.
  (dispatch :dispatch :dispatch!) ; Mailbox for dispatcher thread.

  (uri-to-mailbox :uri-to-mailbox :uri-to-mailbox!)
)

;; *** STUFF ***
  ; Hash map containing uri/mailbox pairs and uuid/uri pairs.
  ; A uri/mailbox pair maps the external URI denotation of a mailbox resource to an internal <mailbox> object.
  ; A uuid/uri pair maps the uuid of the mailbox in a uri/mailbox pair to the uri of the uri/mailbox pair.
;  (contacts :contacts :contacts!)

  ; Hash map of uuid (string) to the external URI denoting the internal object with that uuid.
;  (uuid/uri :uuid/uri :uuid/uri!)
;  (uri/uuid :uri/uuid :uuid/uri!) ; Inverse map of above.
  ; Hash map of uuid/mailbox pairs.
;  (uuid/mailbox :uuid/mailbox :uuid/mailbox!)



(define-method (initialize (<serflet> s) (<string> host) (<number> port))
  (:host! s host)
  (:port! s port)
  (:uri-to-mailbox! s (make-hashtable)) ; equal? predicate and hash, thread-safe, weak-keys.

(define-generics
  !
  uuid-to-uri)

(define-method (uuid-to-uri (<serflet> s) (<string> uuid))
  (make-uri "crest" (:host s) (:port s) (string-append "/" uuid)))

(define-method (! (<serflet> s) (<java.net.URI> u) (<value> v))
  (cond
   ((hashtable-get (:uri-to-mailbox s) u) =>
    (lambda (m) (! m v)))
   (else (! (:dispatch s) `(relay ,u ,v)))))


   