#lang racket

(require ffi/unsafe)
(require "gst_base.rkt")

(provide (all-defined-out))

#|typedef enum
{
  GST_CORE_ERROR_FAILED = 1,
  GST_CORE_ERROR_TOO_LAZY,
  GST_CORE_ERROR_NOT_IMPLEMENTED,
  GST_CORE_ERROR_STATE_CHANGE,
  GST_CORE_ERROR_PAD,
  GST_CORE_ERROR_THREAD,
  GST_CORE_ERROR_NEGOTIATION,
  GST_CORE_ERROR_EVENT,
  GST_CORE_ERROR_SEEK,
  GST_CORE_ERROR_CAPS,
  GST_CORE_ERROR_TAG,
  GST_CORE_ERROR_MISSING_PLUGIN,
  GST_CORE_ERROR_CLOCK,
  GST_CORE_ERROR_DISABLED,
  GST_CORE_ERROR_NUM_ERRORS
} GstCoreError;|#


(define GST_CORE_ERROR_FAILED 1)
(define GST_CORE_ERROR_TOO_LAZY 2)
(define GST_CORE_ERROR_NOT_IMPLEMENTED 3)
(define GST_CORE_ERROR_STATE_CHANGE 4)
(define GST_CORE_ERROR_PAD 5)
(define GST_CORE_ERROR_THREAD 6)
(define GST_CORE_ERROR_NEGOTIATION 7)
(define GST_CORE_ERROR_EVENT 8)
(define GST_CORE_ERROR_SEEK 9)
(define GST_CORE_ERROR_CAPS 10)
(define GST_CORE_ERROR_TAG 11)
(define GST_CORE_ERROR_MISSING_PLUGIN 12)
(define GST_CORE_ERROR_CLOCK 13)
(define GST_CORE_ERROR_DISABLED 14)
(define GST_CORE_ERROR_NUM_ERRORS 15)


#|
typedef enum
{
  GST_LIBRARY_ERROR_FAILED = 1,
  GST_LIBRARY_ERROR_TOO_LAZY,
  GST_LIBRARY_ERROR_INIT,
  GST_LIBRARY_ERROR_SHUTDOWN,
  GST_LIBRARY_ERROR_SETTINGS,
  GST_LIBRARY_ERROR_ENCODE,
  GST_LIBRARY_ERROR_NUM_ERRORS
} GstLibraryError;
|#

(define GST_LIBRARY_ERROR_FAILED 1) 
(define GST_LIBRARY_ERROR_TOO_LAZY 2) 
(define GST_LIBRARY_ERROR_INIT 3) 
(define GST_LIBRARY_ERROR_SHUTDOWN 4)
(define GST_LIBRARY_ERROR_SETTINGS 5)
(define GST_LIBRARY_ERROR_ENCODE 6)
(define GST_LIBRARY_ERROR_NUM_ERRORS 7)


#|
typedef enum
{
  GST_RESOURCE_ERROR_FAILED = 1,
  GST_RESOURCE_ERROR_TOO_LAZY,
  GST_RESOURCE_ERROR_NOT_FOUND,
  GST_RESOURCE_ERROR_BUSY,
  GST_RESOURCE_ERROR_OPEN_READ,
  GST_RESOURCE_ERROR_OPEN_WRITE,
  GST_RESOURCE_ERROR_OPEN_READ_WRITE,
  GST_RESOURCE_ERROR_CLOSE,
  GST_RESOURCE_ERROR_READ,
  GST_RESOURCE_ERROR_WRITE,
  GST_RESOURCE_ERROR_SEEK,
  GST_RESOURCE_ERROR_SYNC,
  GST_RESOURCE_ERROR_SETTINGS,
  GST_RESOURCE_ERROR_NO_SPACE_LEFT,
  GST_RESOURCE_ERROR_NUM_ERRORS
} GstResourceError;
|#


(define GST_RESOURCE_ERROR_FAILED 1) 
(define GST_RESOURCE_ERROR_TOO_LAZY 2) 
(define GST_RESOURCE_ERROR_NOT_FOUND 3) 
(define GST_RESOURCE_ERROR_BUSY 4)
(define GST_RESOURCE_ERROR_OPEN_READ 5) 
(define GST_RESOURCE_ERROR_OPEN_WRITE 6)
(define GST_RESOURCE_ERROR_OPEN_READ_WRITE 7)
(define GST_RESOURCE_ERROR_CLOSE 8)
(define GST_RESOURCE_ERROR_READ 9)
(define GST_RESOURCE_ERROR_WRITE 10) 
(define GST_RESOURCE_ERROR_SEEK 11)
(define GST_RESOURCE_ERROR_SYNC 12)
(define GST_RESOURCE_ERROR_SETTINGS 13) 
(define GST_RESOURCE_ERROR_NO_SPACE_LEFT 14) 
(define GST_RESOURCE_ERROR_NUM_ERRORS 15)


#|typedef enum
{
  GST_STREAM_ERROR_FAILED = 1,
  GST_STREAM_ERROR_TOO_LAZY,
  GST_STREAM_ERROR_NOT_IMPLEMENTED,
  GST_STREAM_ERROR_TYPE_NOT_FOUND,
  GST_STREAM_ERROR_WRONG_TYPE,
  GST_STREAM_ERROR_CODEC_NOT_FO UND,
  GST_STREAM_ERROR_DECODE,
  GST_STREAM_ERROR_ENCODE,
  GST_STREAM_ERROR_DEMUX,
  GST_STREAM_ERROR_MUX,
  GST_STREAM_ERROR_FORMAT,
  GST_STREAM_ERROR_DECRYPT,
  GST_STREAM_ERROR_DECRYPT_NOKEY,
  GST_STREAM_ERROR_NUM_ERRORS
} GstStreamError;|#

(define GST_STREAM_ERROR_FAILED 1) 
(define GST_STREAM_ERROR_TOO_LAZY 2)
(define GST_STREAM_ERROR_NOT_IMPLEMENTED 3)
(define GST_STREAM_ERROR_TYPE_NOT_FOUND 4)
(define GST_STREAM_ERROR_WRONG_TYPE 5)
(define GST_STREAM_ERROR_CODEC_NOT_FOUND 6)
(define GST_STREAM_ERROR_DECODE 7)
(define GST_STREAM_ERROR_ENCODE 8)
(define GST_STREAM_ERROR_DEMUX 9)
(define GST_STREAM_ERROR_MUX 10)
(define GST_STREAM_ERROR_FORMAT 11)
(define GST_STREAM_ERROR_DECRYPT 12)
(define GST_STREAM_ERROR_DECRYPT_NOKEY 13)
(define GST_STREAM_ERROR_NUM_ERRORS 14)


#|
#define             GST_CORE_ERROR
#define             GST_LIBRARY_ERROR
#define             GST_RESOURCE_ERROR
#define             GST_STREAM_ERROR
#define             GST_ERROR_SYSTEM
|#

;gchar *             gst_error_get_message               (GQuark domain gint code);
(define-gstreamer gst_error_get_message (_fun _GQuark _gint -> _string))
