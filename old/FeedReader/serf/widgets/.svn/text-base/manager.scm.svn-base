(define (thunk/manager)
  (define (widget-list key value) (hashtable->alist value))

  (define (widget-spawn title)
    (cond ((string-ci=? "RSS Reader" title) (peer/spawn (this-peer) thunk/rss-feed))
          ((string-ci=? "Tag Cloud" title) (peer/spawn (this-peer) thunk/tagcloud))
          ((string-ci=? "QR Code" title) (peer/spawn (this-peer) thunk/qrcode))
          ;((string-ci=? "Mirror" title) (peer/spawn thunk/mirror))
          ((string-ci=? "URL Selector" title) (peer/spawn (this-peer) thunk/urlsel))
          ((string-ci=? "Sparkline" title) (peer/spawn (this-peer) thunk/sparkline))
          ((string-ci=? "Calendar" title) (peer/spawn (this-peer) thunk/calendar))
          ((string-ci=? "Google News" title) (peer/spawn (this-peer) thunk/google-news))
          (else "")
    )
  )
  (let ((widgets-data (make-hashtable string-ci=?))
        (widgets-mbox (make-hashtable string-ci=?))
        (linkid 0))
    (display "thunk/manager: ready to serve\n") 
    (let loop ((m (? (this-mailbox))))
      ;(display (format "thunk/manager: path:~a body:~a\n" (:message/path m) (:message/body m)))
      (match
       (message/path+body m)

       (#(/http/get #(,origin ,uri ,request ,response))
        (let* (
           (req-uri (uri/path uri)))
         (cond ((string-suffix-ci? "/maps" req-uri)
          (http/response/entity! response (json/string (list (cons 'items (list->vector(hashtable/map widget-list widgets-data)))))))
               (else (display (format "Unknown URI: ~s" req-uri))))
        (! (:message/reply m) response :no-metadata: #f (:message/echo m))))

       (#(/http/post #(,origin ,uri ,req-body))
        (display (format "thunk/manager: body:~a\n" req-body))
        (let* (
          (req-uri (uri/path uri))
          (req-val (json/translate req-body)))
         (cond ((string-suffix-ci? "/create" req-uri)
                (let* ((table (make-hashtable string-ci=?)))
                  (for-each (lambda (v) (hashtable/put! table (car v) (cdr v))) req-val)
                  (let* ((wid (hashtable/get table "id"))
                         (title (hashtable/get table "title"))
                         (wid-uuid (widget-spawn title))
                         (wid-mbox (peer/mailbox (this-peer) wid-uuid))
                         (type-url (format "/mailbox/~a" wid-uuid)))
                  (hashtable/put! table "url" type-url)
                  (hashtable/put! widgets-mbox wid wid-mbox)
                  (hashtable/put! widgets-data wid table))
                ))
               ((string-suffix-ci? "/link" req-uri)
                (let* ((table (make-hashtable string-ci=?)))
                  (for-each (lambda (v) (hashtable/put! table (car v) (cdr v))) req-val)
                  (hashtable/put! widgets-data (string-join (list "link" (number->string linkid))) table)
                  (set! linkid (+ linkid 1))
                  (let* ((from-wid (hashtable/get table "from"))
                         (to-wid (hashtable/get table "to"))
                         (from-mbox (hashtable/get widgets-mbox from-wid))
                         (to-mbox (hashtable/get widgets-mbox to-wid)))
                    (! (@ from-mbox 'link/create) to-mbox)
                  )
                ))
               ((string-suffix-ci? "/move" req-uri)
                (let* ((table (make-hashtable string-ci=?)))
                  (for-each (lambda (v) (hashtable/put! table (car v) (cdr v))) req-val)
                  (let* ((wid (hashtable/get table "id"))
                         (cur-val (hashtable/get widgets-data wid)))
                  (define (widget-list-update k v)
                          (hashtable/put! cur-val k v)
                  )
                  (hashtable/for-each widget-list-update table)
                ))
               )
               (else (display (format "Unknown URI: ~s" req-url))))
         ))

        (,_ignore #f))

      (loop (? (this-mailbox)))))
)
