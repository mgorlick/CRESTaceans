Draft of text transitions for FSE 2009 demonstration film.
Keyed to the storyboard draft of 2009/08/03 (14 pages)
Notation
  <storyboard i>: refers to the i'th page of the storyboard.
  <T>: Indicates a text transition for the film

<T>: We begin with a completely blank browser canvas and
will assemble a dynamic distributed application. In
our demonstration the browser is NOTHING more than a
graphics engine. No significant computation other than
rendering is occurring browser side.

<storyboard 0>: completely blank browser window

<T>: CREST is backwards compatible with web browsers and servers.
We visit an URL hosted by a CREST peer to download the graphics
support we need and the instantiation of a Manager widget

<storyboard 1>: download of Manager widget

<T>: The computation supporting the Manager is executing remotely
on a CREST peer. Using the services of the remote Manager computation
we will populate our workspace with other widgets starting
with an URL widget.

<storyboard 2>: creation of an URL widget

<T>: The role of the URL widget will be evident shortly.
Next we create a Mirror widget.

<storyboard 3>: creation of a Mirror widget

<T>: The Mirror widget displays a "map" of the widgets on
the browser canvas. All of the information
for the mirror is provided by a remote CREST computation.
For every widget on the browser canvas there is a
remote distributed CREST computation driving that widget.

<storyboard 4>: Set the URL of the URL widget

<T>: The URL widget provides an URL to other widgets.
Here we entered an URL that represents a sports RSS/Atom news feed.
Next we create an widget for displaying the contents of a news feed.

<storyboard 5>: Create RSS widget

<T>: Note how the Mirror reflects the relative position of each widget
as it is added to the canvas. With periodic, remote state updates
the Mirror widget tracks the location of each widget, including itself,
as they are moved about the canvas.

<storyboard 5.5> Move the RSS widget around to demonstrate mirror
tracking

<T>: We next create a "link" from the URL widget to the RSS Reader widget.
A link establishes a messaging path from one distributed CREST
computation to another. The link here will allow the
URL computation to tell the RSS Reader computation which feed it
should subscribe to and display.

<storyboard 6>: Set link from URL widget to RSS widget. Shows
the RSS widget coming alive and displaying story summaries.

<T>: Note how the new link was reflected in the display of the Mirror
widget. The RSS widget, using the URL sent to it, subscribed
to the feed and began displaying its contents.
Next we will add another type of widget and another link.

<storyboard 7-8>: Add a Tag Cloud widget and create a link
from the RSS reader to the tag cloud.

<T>: The remote RSS reader computation is feeding story text to
the remote tag cloud computation. The tag cloud computation
extracts words and word counts and transmits that state to the
tag cloud widget.

<storyboard 9>: Add sparkline and calendar. Create a link
from the tag cloud to sparkline.

<T>: Now the RSS reader computation is supplying information
to a chain distributed computations.
At this point in the construction of the application another
user somewhere on the internet joins in. When he does the
computation as a whole will be shared between the two users.

<storyboard 9.1>: We see another laptop start up with a completely
blank browser canvas and synchronize with the ongoing computation(s).

<T>: Since both users are manipulating the same collection of remote
CREST computations the actions of one user are reflected on the
browser canvas of the other.

<storyboard 9.2>: We see one user move widgets and the other
laptop screen updates with widgets in new locations.

<T>: The addition of new distributed CREST computations is tracked
by all participating users. Watch as each user adds a widget
to the application.

<storyboard 9.3>: User on laptop A adds Calendar widget.
We see the widget also appear on the screen of laptop B.

<storyboard 10>: User on laptop B adds Google News widget.
We see the widget also appear on screen of laptop A.

Now watch as each user sets new links to the widgets they just
added.

<storyboard 11>: User on laptop A creates a link from the
tag cloud to the Google News reader. We see the link appear
in the mirrors on both laptop A and laptop B. The user on
laptop B creates a link from the Calendar widget to the Google News
reader We see the link appear in the mirrors on both laptops.
We see the Google News reader begin to display news feeds.

<T>: The Google News reader is displaying news that appeared
on the date chosen in the calendar and whose keywords match
the keywords appearing in the tag cloud. Watch how the display
of the Google News reader changes as the tag cloud changes or
another date is selected.

<storyboard 11>: We see the Google News reader updating.
One user changes the URL in the URL widget and the change
propagates to RSS reader, sparkline, tag cloud, and Google News.
We see the same changes on both laptops.
A bit later the other user changes the date on the Calendar.
Again we see the Calendar widget change on the other laptop
and the Google News reader update on both.

<storyboard 11.1>: Someone walks into the office.

<T>: Visitor: That looks like an interesting application.
Will you share it with me? I'd like to run it on my iPhone.
Grad Students: Sure, happy to. It's all open source.

<storyboard 12>: QR Code widget is added by one user and we
see it appearing on both laptops. A closeup of the QR widget
so that the 2D code is clear.

<T>: Grad Students: Just take a photo of the 2D barcode.

<storyboard 13:> We see the visitor photographing the QR code
widget with the iPhone and watch as the Safari browser comes up
and synchronizes with the CREST computation.

<T>: The iPhone synchronized with the distributed CREST computations
as they were running. Changes by any participant will be reflected
among all.

<storyboard 13.1> We see when widgets are moved on either laptop
the iPhone display is also updated. As RSS reader and tag cloud
change on laptops they also change on iPhone.

<T>: Now lets pull the covers back on the architectural
mechanisms that make this application possible.

===END===





















