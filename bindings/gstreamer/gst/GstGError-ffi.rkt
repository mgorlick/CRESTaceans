#lang racket

(require "gst_base.rkt")

(provide (all-defined-out))

#|typedef enum
{
  GST_CORE_ERROR_FAILED = 1,
  GST_CORE_ERROR_TOO_LAZY,
  GST_CORE_ERROR_NOT_IMPLEMENTED,
  GST_CORE_ERROR_STATE_CHANGE,
  GST_CORE_ERROR_PAD,
  GST_CORE_ERROR_THREAD,
  GST_CORE_ERROR_NEGOTIATION,
  GST_CORE_ERROR_EVENT,
  GST_CORE_ERROR_SEEK,
  GST_CORE_ERROR_CAPS,
  GST_CORE_ERROR_TAG,
  GST_CORE_ERROR_MISSING_PLUGIN,
  GST_CORE_ERROR_CLOCK,
  GST_CORE_ERROR_DISABLED,
  GST_CORE_ERROR_NUM_ERRORS
} GstCoreError;|#

(define _GstCoreError
  (_enum '(GST_CORE_ERROR_FAILED = 1 GST_CORE_ERROR_TOO_LAZY GST_CORE_ERROR_NOT_IMPLEMENTED GST_CORE_ERROR_STATE_CHANGE GST_CORE_ERROR_PAD GST_CORE_ERROR_THREAD GST_CORE_ERROR_NEGOTIATION GST_CORE_ERROR_EVENT GST_CORE_ERROR_SEEK GST_CORE_ERROR_CAPS GST_CORE_ERROR_TAG GST_CORE_ERROR_MISSING_PLUGIN GST_CORE_ERROR_CLOCK GST_CORE_ERROR_DISABLED GST_CORE_ERROR_NUM_ERRORS)))


#|
typedef enum
{
  GST_LIBRARY_ERROR_FAILED = 1,
  GST_LIBRARY_ERROR_TOO_LAZY,
  GST_LIBRARY_ERROR_INIT,
  GST_LIBRARY_ERROR_SHUTDOWN,
  GST_LIBRARY_ERROR_SETTINGS,
  GST_LIBRARY_ERROR_ENCODE,
  GST_LIBRARY_ERROR_NUM_ERRORS
} GstLibraryError;
|#

(define _GstLibraryError
  (_enum '(GST_LIBRARY_ERROR_FAILED = 1 GST_LIBRARY_ERROR_TOO_LAZY GST_LIBRARY_ERROR_INIT GST_LIBRARY_ERROR_SHUTDOWN GST_LIBRARY_ERROR_SETTINGS GST_LIBRARY_ERROR_ENCODE GST_LIBRARY_ERROR_NUM_ERRORS)))


#|
typedef enum
{
  GST_RESOURCE_ERROR_FAILED = 1,
  GST_RESOURCE_ERROR_TOO_LAZY,
  GST_RESOURCE_ERROR_NOT_FOUND,
  GST_RESOURCE_ERROR_BUSY,
  GST_RESOURCE_ERROR_OPEN_READ,
  GST_RESOURCE_ERROR_OPEN_WRITE,
  GST_RESOURCE_ERROR_OPEN_READ_WRITE,
  GST_RESOURCE_ERROR_CLOSE,
  GST_RESOURCE_ERROR_READ,
  GST_RESOURCE_ERROR_WRITE,
  GST_RESOURCE_ERROR_SEEK,
  GST_RESOURCE_ERROR_SYNC,
  GST_RESOURCE_ERROR_SETTINGS,
  GST_RESOURCE_ERROR_NO_SPACE_LEFT,
  GST_RESOURCE_ERROR_NUM_ERRORS
} GstResourceError;
|#


(define _GstResourceError
  (_enum '(GST_RESOURCE_ERROR_FAILED = 1 GST_RESOURCE_ERROR_TOO_LAZY GST_RESOURCE_ERROR_NOT_FOUND GST_RESOURCE_ERROR_BUSY GST_RESOURCE_ERROR_OPEN_READ GST_RESOURCE_ERROR_OPEN_WRITE GST_RESOURCE_ERROR_OPEN_READ_WRITE GST_RESOURCE_ERROR_CLOSE GST_RESOURCE_ERROR_READ GST_RESOURCE_ERROR_WRITE GST_RESOURCE_ERROR_SEEK GST_RESOURCE_ERROR_SYNC GST_RESOURCE_ERROR_SETTINGS GST_RESOURCE_ERROR_NO_SPACE_LEFT GST_RESOURCE_ERROR_NUM_ERRORS)))


#|typedef enum
{
  GST_STREAM_ERROR_FAILED = 1,
  GST_STREAM_ERROR_TOO_LAZY,
  GST_STREAM_ERROR_NOT_IMPLEMENTED,
  GST_STREAM_ERROR_TYPE_NOT_FOUND,
  GST_STREAM_ERROR_WRONG_TYPE,
  GST_STREAM_ERROR_CODEC_NOT_FOUND,
  GST_STREAM_ERROR_DECODE,
  GST_STREAM_ERROR_ENCODE,
  GST_STREAM_ERROR_DEMUX,
  GST_STREAM_ERROR_MUX,
  GST_STREAM_ERROR_FORMAT,
  GST_STREAM_ERROR_DECRYPT,
  GST_STREAM_ERROR_DECRYPT_NOKEY,
  GST_STREAM_ERROR_NUM_ERRORS
} GstStreamError;|#

(define _GstStreamError
  (_enum '(GST_STREAM_ERROR_FAILED = 1 GST_STREAM_ERROR_TOO_LAZY GST_STREAM_ERROR_NOT_IMPLEMENTED GST_STREAM_ERROR_TYPE_NOT_FOUND GST_STREAM_ERROR_WRONG_TYPE GST_STREAM_ERROR_CODEC_NOT_FOUND GST_STREAM_ERROR_DECODE GST_STREAM_ERROR_ENCODE GST_STREAM_ERROR_DEMUX GST_STREAM_ERROR_MUX GST_STREAM_ERROR_FORMAT GST_STREAM_ERROR_DECRYPT GST_STREAM_ERROR_DECRYPT_NOKEY GST_STREAM_ERROR_NUM_ERRORS)))


#|
#define             GST_CORE_ERROR
#define             GST_LIBRARY_ERROR
#define             GST_RESOURCE_ERROR
#define             GST_STREAM_ERROR
#define             GST_ERROR_SYSTEM
|#

;gchar *             gst_error_get_message               (GQuark domain gint code);
(define-gstreamer gst_error_get_message (_fun _GQuark _gint -> _string))
